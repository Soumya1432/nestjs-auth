// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String         @id @default(uuid()) @db.Uuid
  firstName       String?        @map("first_name")
  lastName        String?        @map("last_name")
  email           String         @unique @db.VarChar(100)
  mobileNo        String?        @unique @map("mobile_no") @db.VarChar(100)
  otp             String?
  otpExpiry       DateTime?      @map("otp_expiry")
  isEmailVerified Boolean        @default(false) @map("is_email_verified")
  role            Role           @default(USER)
  lastLogin       DateTime?      @map("last_login")
  refreshTokens   RefreshToken[]
  loginAttempts   LoginAttempt[]
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")
  deletedAt       DateTime?      @map("deleted_at") @db.Timestamp()

  @@index([email])
  @@map("users")
}

enum Role {
  USER
  ACCOUNT_MANAGER
  ADMIN
}

model RefreshToken {
  id        String   @id @default(uuid()) @db.Uuid
  token     String?  @map("token") // hased refresh token
  userId    String   @map("user_id") @db.Uuid
  user      User     @relation(fields: [userId], references: [id], onDelete: Restrict)
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@index([userId])
  @@index([expiresAt])
  @@map("refresh_tokens")
}

model LoginAttempt {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String?  @map("user_id") @db.Uuid // Nullable for failed attempts before user lookup
  user        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  email       String   @db.VarChar(100)
  ipAddress   String?  @map("ip_address")
  userAgent   String?  @map("user_agent")
  success     Boolean  @default(false)
  attemptedAt DateTime @default(now()) @map("attempted_at")

  @@index([userId, attemptedAt])
  @@index([email])
  @@map("login_attempts")
}
